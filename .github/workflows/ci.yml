name: Python Package CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  info:
    runs-on: ubuntu-latest

    steps:
      - name: List all secrets names
        run: |
          echo "Listing all secrets:"
          for key in $(env | grep "^SECRET_" | cut -d= -f1); do
            echo "$key=${!key}"
          done
        env:
          SECRET_ONE: ${{ secrets.SECRET_TEST }}

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit
        id: get_commit_count
        run: |
          COMMIT_COUNT=$(git rev-list --count HEAD)
          echo "COMMIT_COUNT=$COMMIT_COUNT" >> $GITHUB_ENV

      - name: Update version
        run: |
          sed -i "s/^version = \".*\"/version = \"0.0.${COMMIT_COUNT}\"/" pyproject.toml
        env:
          COMMIT_COUNT: ${{ env.COMMIT_COUNT }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip list

      - name: Build package
        run: |
          hatch build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: py-artifacts
          path: dist/*

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: py-artifacts
          path: ./py-artifacts

      - name: Install package from artifact
        run: |
          cd ./py-artifacts && ls -la
          pip install *.whl

      - name: Get package Info
        run: |
          pip show my-hw
          hello-world

  tag:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .Net
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"
      
      - name: Install GitVersion.Tool
        run: |
          dotnet tool install --global GitVersion.Tool
          echo "export PATH=\$PATH:\$HOME/.dotnet/tools" >> $GITHUB_ENV

      - name: Generate version with GitVersion
        id: gitversion
        run: |
          version_info=$(dotnet gitversion /output json /showvariable InformationalVersion)
          version_output=$(dotnet gitversion /output json /showvariable MajorMinorPatch)
          echo "Calculated Version: $version_output" && echo "Informational Version: $version_info"
          echo "version=$version_output" >> $GITHUB_OUTPUT
        env:
          DOTNET_ROOT: $HOME/.dotnet

      - name: Update Version
        run: |
          cd $GITHUB_WORKSPACE && pwd && ls -la
          sed -i "s/^version = \".*\"/version = \"${NEW_VERSION}\"/" pyproject.toml
          echo "Package Version updated:"
          grep "version = " pyproject.toml
        env:
          NEW_VERSION: ${{ steps.gitversion.outputs.version }}

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create Tag
        run: |
          git tag ${{ env.NEW_VERSION }}
          git push origin ${{ env.NEW_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ steps.gitversion.outputs.version }}
